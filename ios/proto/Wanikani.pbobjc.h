// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/wanikani.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class WKKanji;
@class WKMeaning;
@class WKRadical;
@class WKReading;
@class WKVocabulary;
@class WKVocabulary_Sentence;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum WKReading_Type

typedef GPB_ENUM(WKReading_Type) {
  WKReading_Type_Onyomi = 1,
  WKReading_Type_Kunyomi = 2,
  WKReading_Type_Nanori = 3,
};

GPBEnumDescriptor *WKReading_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL WKReading_Type_IsValidValue(int32_t value);

#pragma mark - Enum WKVocabulary_PartOfSpeech

typedef GPB_ENUM(WKVocabulary_PartOfSpeech) {
  WKVocabulary_PartOfSpeech_Noun = 1,
  WKVocabulary_PartOfSpeech_Numeral = 2,
  WKVocabulary_PartOfSpeech_IntransitiveVerb = 3,
  WKVocabulary_PartOfSpeech_IchidanVerb = 4,
  WKVocabulary_PartOfSpeech_TransitiveVerb = 5,
  WKVocabulary_PartOfSpeech_NoAdjective = 6,
  WKVocabulary_PartOfSpeech_GodanVerb = 7,
  WKVocabulary_PartOfSpeech_NaAdjective = 8,
  WKVocabulary_PartOfSpeech_IAdjective = 9,
  WKVocabulary_PartOfSpeech_Suffix = 10,
  WKVocabulary_PartOfSpeech_Adverb = 11,
  WKVocabulary_PartOfSpeech_SuruVerb = 12,
  WKVocabulary_PartOfSpeech_Prefix = 13,
  WKVocabulary_PartOfSpeech_ProperNoun = 14,
  WKVocabulary_PartOfSpeech_Expression = 15,
  WKVocabulary_PartOfSpeech_Adjective = 16,
  WKVocabulary_PartOfSpeech_Interjection = 17,
  WKVocabulary_PartOfSpeech_Counter = 18,
  WKVocabulary_PartOfSpeech_Pronoun = 19,
  WKVocabulary_PartOfSpeech_Conjunction = 20,
};

GPBEnumDescriptor *WKVocabulary_PartOfSpeech_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL WKVocabulary_PartOfSpeech_IsValidValue(int32_t value);

#pragma mark - Enum WKSubject_Type

typedef GPB_ENUM(WKSubject_Type) {
  WKSubject_Type_Radical = 1,
  WKSubject_Type_Kanji = 2,
  WKSubject_Type_Vocabulary = 3,
};

GPBEnumDescriptor *WKSubject_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL WKSubject_Type_IsValidValue(int32_t value);

#pragma mark - WKWanikaniRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface WKWanikaniRoot : GPBRootObject
@end

#pragma mark - WKMeaning

typedef GPB_ENUM(WKMeaning_FieldNumber) {
  WKMeaning_FieldNumber_Meaning = 1,
  WKMeaning_FieldNumber_IsPrimary = 2,
};

@interface WKMeaning : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *meaning;
/** Test to see if @c meaning has been set. */
@property(nonatomic, readwrite) BOOL hasMeaning;

@property(nonatomic, readwrite) BOOL isPrimary;

@property(nonatomic, readwrite) BOOL hasIsPrimary;
@end

#pragma mark - WKReading

typedef GPB_ENUM(WKReading_FieldNumber) {
  WKReading_FieldNumber_Reading = 1,
  WKReading_FieldNumber_IsPrimary = 2,
  WKReading_FieldNumber_Type = 3,
};

@interface WKReading : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *reading;
/** Test to see if @c reading has been set. */
@property(nonatomic, readwrite) BOOL hasReading;

@property(nonatomic, readwrite) BOOL isPrimary;

@property(nonatomic, readwrite) BOOL hasIsPrimary;
@property(nonatomic, readwrite) WKReading_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@end

#pragma mark - WKRadical

typedef GPB_ENUM(WKRadical_FieldNumber) {
  WKRadical_FieldNumber_Japanese = 1,
  WKRadical_FieldNumber_MeaningsArray = 2,
  WKRadical_FieldNumber_CharacterImage = 3,
  WKRadical_FieldNumber_Mnemonic = 4,
};

@interface WKRadical : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *japanese;
/** Test to see if @c japanese has been set. */
@property(nonatomic, readwrite) BOOL hasJapanese;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKMeaning*> *meaningsArray;
/** The number of items in @c meaningsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger meaningsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *characterImage;
/** Test to see if @c characterImage has been set. */
@property(nonatomic, readwrite) BOOL hasCharacterImage;

@property(nonatomic, readwrite, copy, null_resettable) NSString *mnemonic;
/** Test to see if @c mnemonic has been set. */
@property(nonatomic, readwrite) BOOL hasMnemonic;

@end

#pragma mark - WKKanji

typedef GPB_ENUM(WKKanji_FieldNumber) {
  WKKanji_FieldNumber_Japanese = 1,
  WKKanji_FieldNumber_ReadingsArray = 2,
  WKKanji_FieldNumber_MeaningsArray = 3,
  WKKanji_FieldNumber_MeaningMnemonic = 4,
  WKKanji_FieldNumber_MeaningHint = 5,
  WKKanji_FieldNumber_ReadingMnemonic = 6,
  WKKanji_FieldNumber_ReadingHint = 7,
  WKKanji_FieldNumber_ComponentSubjectIdsArray = 8,
};

@interface WKKanji : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *japanese;
/** Test to see if @c japanese has been set. */
@property(nonatomic, readwrite) BOOL hasJapanese;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKReading*> *readingsArray;
/** The number of items in @c readingsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger readingsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKMeaning*> *meaningsArray;
/** The number of items in @c meaningsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger meaningsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *meaningMnemonic;
/** Test to see if @c meaningMnemonic has been set. */
@property(nonatomic, readwrite) BOOL hasMeaningMnemonic;

@property(nonatomic, readwrite, copy, null_resettable) NSString *meaningHint;
/** Test to see if @c meaningHint has been set. */
@property(nonatomic, readwrite) BOOL hasMeaningHint;

@property(nonatomic, readwrite, copy, null_resettable) NSString *readingMnemonic;
/** Test to see if @c readingMnemonic has been set. */
@property(nonatomic, readwrite) BOOL hasReadingMnemonic;

@property(nonatomic, readwrite, copy, null_resettable) NSString *readingHint;
/** Test to see if @c readingHint has been set. */
@property(nonatomic, readwrite) BOOL hasReadingHint;

@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *componentSubjectIdsArray;
/** The number of items in @c componentSubjectIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger componentSubjectIdsArray_Count;

@end

#pragma mark - WKVocabulary

typedef GPB_ENUM(WKVocabulary_FieldNumber) {
  WKVocabulary_FieldNumber_Japanese = 1,
  WKVocabulary_FieldNumber_ReadingsArray = 2,
  WKVocabulary_FieldNumber_MeaningsArray = 3,
  WKVocabulary_FieldNumber_MeaningExplanation = 4,
  WKVocabulary_FieldNumber_ReadingExplanation = 5,
  WKVocabulary_FieldNumber_SentencesArray = 6,
  WKVocabulary_FieldNumber_ComponentSubjectIdsArray = 7,
  WKVocabulary_FieldNumber_PartsOfSpeechArray = 8,
  WKVocabulary_FieldNumber_Audio = 9,
};

@interface WKVocabulary : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *japanese;
/** Test to see if @c japanese has been set. */
@property(nonatomic, readwrite) BOOL hasJapanese;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKReading*> *readingsArray;
/** The number of items in @c readingsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger readingsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKMeaning*> *meaningsArray;
/** The number of items in @c meaningsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger meaningsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *meaningExplanation;
/** Test to see if @c meaningExplanation has been set. */
@property(nonatomic, readwrite) BOOL hasMeaningExplanation;

@property(nonatomic, readwrite, copy, null_resettable) NSString *readingExplanation;
/** Test to see if @c readingExplanation has been set. */
@property(nonatomic, readwrite) BOOL hasReadingExplanation;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<WKVocabulary_Sentence*> *sentencesArray;
/** The number of items in @c sentencesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sentencesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *componentSubjectIdsArray;
/** The number of items in @c componentSubjectIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger componentSubjectIdsArray_Count;

// |partsOfSpeechArray| contains |WKVocabulary_PartOfSpeech|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *partsOfSpeechArray;
/** The number of items in @c partsOfSpeechArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger partsOfSpeechArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

@end

#pragma mark - WKVocabulary_Sentence

typedef GPB_ENUM(WKVocabulary_Sentence_FieldNumber) {
  WKVocabulary_Sentence_FieldNumber_Japanese = 1,
  WKVocabulary_Sentence_FieldNumber_English = 2,
};

@interface WKVocabulary_Sentence : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *japanese;
/** Test to see if @c japanese has been set. */
@property(nonatomic, readwrite) BOOL hasJapanese;

@property(nonatomic, readwrite, copy, null_resettable) NSString *english;
/** Test to see if @c english has been set. */
@property(nonatomic, readwrite) BOOL hasEnglish;

@end

#pragma mark - WKSubject

typedef GPB_ENUM(WKSubject_FieldNumber) {
  WKSubject_FieldNumber_Id_p = 1,
  WKSubject_FieldNumber_Level = 2,
  WKSubject_FieldNumber_Slug = 3,
  WKSubject_FieldNumber_DocumentURL = 4,
  WKSubject_FieldNumber_Radical = 5,
  WKSubject_FieldNumber_Kanji = 6,
  WKSubject_FieldNumber_Vocabulary = 7,
};

@interface WKSubject : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) int32_t level;

@property(nonatomic, readwrite) BOOL hasLevel;
@property(nonatomic, readwrite, copy, null_resettable) NSString *slug;
/** Test to see if @c slug has been set. */
@property(nonatomic, readwrite) BOOL hasSlug;

@property(nonatomic, readwrite, copy, null_resettable) NSString *documentURL;
/** Test to see if @c documentURL has been set. */
@property(nonatomic, readwrite) BOOL hasDocumentURL;

@property(nonatomic, readwrite, strong, null_resettable) WKRadical *radical;
/** Test to see if @c radical has been set. */
@property(nonatomic, readwrite) BOOL hasRadical;

@property(nonatomic, readwrite, strong, null_resettable) WKKanji *kanji;
/** Test to see if @c kanji has been set. */
@property(nonatomic, readwrite) BOOL hasKanji;

@property(nonatomic, readwrite, strong, null_resettable) WKVocabulary *vocabulary;
/** Test to see if @c vocabulary has been set. */
@property(nonatomic, readwrite) BOOL hasVocabulary;

@end

#pragma mark - WKAssignment

typedef GPB_ENUM(WKAssignment_FieldNumber) {
  WKAssignment_FieldNumber_Id_p = 1,
  WKAssignment_FieldNumber_Level = 2,
  WKAssignment_FieldNumber_SubjectId = 3,
  WKAssignment_FieldNumber_SubjectType = 4,
  WKAssignment_FieldNumber_AvailableAt = 5,
  WKAssignment_FieldNumber_StartedAt = 6,
  WKAssignment_FieldNumber_SrsStage = 7,
};

@interface WKAssignment : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) int32_t level;

@property(nonatomic, readwrite) BOOL hasLevel;
@property(nonatomic, readwrite) int32_t subjectId;

@property(nonatomic, readwrite) BOOL hasSubjectId;
@property(nonatomic, readwrite) WKSubject_Type subjectType;

@property(nonatomic, readwrite) BOOL hasSubjectType;
@property(nonatomic, readwrite) int32_t availableAt;

@property(nonatomic, readwrite) BOOL hasAvailableAt;
@property(nonatomic, readwrite) int32_t startedAt;

@property(nonatomic, readwrite) BOOL hasStartedAt;
@property(nonatomic, readwrite) int32_t srsStage;

@property(nonatomic, readwrite) BOOL hasSrsStage;
@end

#pragma mark - WKProgress

typedef GPB_ENUM(WKProgress_FieldNumber) {
  WKProgress_FieldNumber_Id_p = 1,
  WKProgress_FieldNumber_MeaningWrong = 2,
  WKProgress_FieldNumber_ReadingWrong = 3,
};

@interface WKProgress : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) BOOL meaningWrong;

@property(nonatomic, readwrite) BOOL hasMeaningWrong;
@property(nonatomic, readwrite) BOOL readingWrong;

@property(nonatomic, readwrite) BOOL hasReadingWrong;
@end

#pragma mark - WKStudyMaterials

typedef GPB_ENUM(WKStudyMaterials_FieldNumber) {
  WKStudyMaterials_FieldNumber_Id_p = 1,
  WKStudyMaterials_FieldNumber_SubjectId = 2,
  WKStudyMaterials_FieldNumber_MeaningNote = 3,
  WKStudyMaterials_FieldNumber_ReadingNote = 4,
  WKStudyMaterials_FieldNumber_MeaningSynonymsArray = 5,
};

@interface WKStudyMaterials : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite) int32_t subjectId;

@property(nonatomic, readwrite) BOOL hasSubjectId;
@property(nonatomic, readwrite, copy, null_resettable) NSString *meaningNote;
/** Test to see if @c meaningNote has been set. */
@property(nonatomic, readwrite) BOOL hasMeaningNote;

@property(nonatomic, readwrite, copy, null_resettable) NSString *readingNote;
/** Test to see if @c readingNote has been set. */
@property(nonatomic, readwrite) BOOL hasReadingNote;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *meaningSynonymsArray;
/** The number of items in @c meaningSynonymsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger meaningSynonymsArray_Count;

@end

#pragma mark - WKUser

typedef GPB_ENUM(WKUser_FieldNumber) {
  WKUser_FieldNumber_Username = 1,
  WKUser_FieldNumber_Level = 2,
  WKUser_FieldNumber_MaxLevelGrantedBySubscription = 3,
  WKUser_FieldNumber_ProfileURL = 4,
  WKUser_FieldNumber_StartedAt = 5,
  WKUser_FieldNumber_Subscribed = 6,
};

@interface WKUser : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *username;
/** Test to see if @c username has been set. */
@property(nonatomic, readwrite) BOOL hasUsername;

@property(nonatomic, readwrite) int32_t level;

@property(nonatomic, readwrite) BOOL hasLevel;
@property(nonatomic, readwrite) int32_t maxLevelGrantedBySubscription;

@property(nonatomic, readwrite) BOOL hasMaxLevelGrantedBySubscription;
@property(nonatomic, readwrite, copy, null_resettable) NSString *profileURL;
/** Test to see if @c profileURL has been set. */
@property(nonatomic, readwrite) BOOL hasProfileURL;

@property(nonatomic, readwrite) int32_t startedAt;

@property(nonatomic, readwrite) BOOL hasStartedAt;
@property(nonatomic, readwrite) BOOL subscribed;

@property(nonatomic, readwrite) BOOL hasSubscribed;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
